name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install electron-builder
      run: npm install --save-dev electron-builder

    - name: Add build scripts to package.json
      run: |
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        pkg.scripts = pkg.scripts || {};
        pkg.scripts.build = 'electron-builder';
        pkg.scripts['build:mac'] = 'electron-builder --mac';
        pkg.scripts['build:win'] = 'electron-builder --win';
        pkg.scripts['build:linux'] = 'electron-builder --linux';
        pkg.build = {
          appId: 'com.wituz.webcam',
          productName: 'Wituz Webcam',
          directories: {
            output: 'dist'
          },
          files: [
            '**/*',
            '!**/node_modules/*/{CHANGELOG.md,README.md,README,readme.md,readme}',
            '!**/node_modules/*/{test,__tests__,tests,powered-test,example,examples}',
            '!**/node_modules/*.d.ts',
            '!**/node_modules/.bin',
            '!**/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}',
            '!.editorconfig',
            '!**/._*',
            '!**/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,.gitignore,.gitattributes}',
            '!**/{__pycache__,thumbs.db,.flowconfig,.idea,.vs,.nyc_output}',
            '!**/{appveyor.yml,.travis.yml,circle.yml}',
            '!**/{npm-debug.log,yarn.lock,.yarn-integrity,.yarn-metadata.json}'
          ],
          mac: {
            category: 'public.app-category.video',
            icon: 'assets/icon.png'
          },
          win: {
            target: 'nsis',
            icon: 'assets/icon.png'
          },
          linux: {
            target: 'AppImage',
            icon: 'assets/icon.png'
          }
        };
        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        "

    - name: Build Electron app
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: dist/
        
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}